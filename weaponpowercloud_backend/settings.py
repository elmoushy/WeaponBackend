"""
Django settings for weaponpowercloud_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Load environment variables from .env file (optional)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv not installed, use default values
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '6hyk-x9f#r!16lez2i+ek+@!x(4!k6x9y-$^1h69_@y9ropte_')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1'] if DEBUG else [
    host.strip() for host in os.getenv('ALLOWED_HOST', 'localhost').split(',')
] + ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',  # Disabled for Oracle compatibility
    'corsheaders',
    'django_extensions',
    "django_filters",
    # 'channels',  # WebSocket support - COMMENTED OUT FOR PRODUCTION
    # Local apps
    'authentication',
    'surveys',
    'notifications',  # New app for real-time notifications
]

# Custom User Model Configuration
AUTH_USER_MODEL = 'authentication.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'csp.middleware.CSPMiddleware',  # Content Security Policy middleware
    'django.middleware.security.SecurityMiddleware',
    'weaponpowercloud_backend.middleware.brute_force_protection.BruteForceProtectionMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'authentication.middleware.UniversalAuthMiddleware',  # Ensure JWT compatibility
    'django.contrib.messages.middleware.MessageMiddleware',
    # Emirates timezone middleware - forces Asia/Dubai timezone for all requests
    'weaponpowercloud_backend.middleware.emirates_timezone.EmiratesTimezoneMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'weaponpowercloud_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weaponpowercloud_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration based on USE_ORACLE environment variable
USE_ORACLE = os.getenv('USE_ORACLE', 'False').lower() == 'true'

if USE_ORACLE:
    # Oracle database configuration for production
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.oracle',
            'NAME': os.getenv('ORACLE_SERVICE'),
            'USER': os.getenv('ORACLE_USERNAME'),
            'PASSWORD': os.getenv('ORACLE_PASSWORD'),
            'HOST': os.getenv('ORACLE_HOST'),
            'PORT': os.getenv('ORACLE_PORT'),
            'OPTIONS': {
                # Oracle-specific connection options
                # Character set mismatch should be handled at Oracle database level
                # Keep it simple to avoid connection parameter errors
            },
        }
    }
    
    # Oracle-specific settings
    SILENCED_SYSTEM_CHECKS = [
        'fields.E007',  # Ignore Oracle field name length warnings
        'models.W037',  # Ignore Oracle conditional index warnings
    ]
    
    # Set Oracle NLS_LANG environment variable for character set handling
    # This helps resolve Oracle character set mismatch issues
    os.environ.setdefault('NLS_LANG', 'AMERICAN_AMERICA.AL32UTF8')
    
else:
    # SQLite database configuration for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
    # Clear Oracle-specific settings when using SQLite
    SILENCED_SYSTEM_CHECKS = []


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Emirates (UAE) timezone - Asia/Dubai
TIME_ZONE = 'Asia/Dubai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Azure AD Configuration
AZURE_TENANT_ID = os.getenv('AZURE_TENANT_ID', '61032d68-6ef9-4d5f-9b9e-46c6556b6f47')
# Use your app ID to accept ID tokens (correct approach for authentication)
AZURE_CLIENT_ID = os.getenv('AZURE_CLIENT_ID', '91ce101f-58e6-4d4c-8f0b-599b713c3101')  # Your app
# Use v2.0 endpoint for ID tokens
AZURE_ISSUER = f"https://login.microsoftonline.com/{AZURE_TENANT_ID}/v2.0"
AZURE_JWKS_URI = f"https://login.microsoftonline.com/{AZURE_TENANT_ID}/discovery/v2.0/keys"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.dual_auth.UniversalAuthentication',  # Universal support for all token types
        'authentication.dual_auth.DualAuthentication',  # Backup dual authentication
        'rest_framework.authentication.SessionAuthentication',  # Keep for browsable API
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Default page size for cards news
}

# JWT Token Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Reduced from 8 hours to 30 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=4),  # Reduced from 24 hours to 4 hours
    'ROTATE_REFRESH_TOKENS': True,  # Generate new refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': False,  # Disabled for Oracle compatibility (no token_blacklist app)
    'UPDATE_LAST_LOGIN': True,  # Update user's last_login field on token refresh
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JSON_ENCODER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# News Service Configuration
NEWS_PAGINATION_SIZE = 12  # Cards news pagination
NEWS_ENCRYPTION_ENABLED = True
NEWS_IMAGE_MAX_SIZE_MB = 10
NEWS_MAX_IMAGES_PER_ITEM = 10

# CORS Configuration
# Read CORS settings from environment variables
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:5173,http://127.0.0.1:5173').split(',')

CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

# Allow all origins setting from environment
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true'

# Only allow all origins in development if explicitly set
if DEBUG and os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true':
    CORS_ALLOW_ALL_ORIGINS = True

# CORS headers that will be accepted
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CORS allowed methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Security Settings for Production
if not DEBUG:
    # Cookie Security
    SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'True').lower() == 'true'
    CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'True').lower() == 'true'
    
    # HTTPS Security
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'True').lower() == 'true'
    
    # Content Security
    SECURE_CONTENT_TYPE_NOSNIFF = os.getenv('SECURE_CONTENT_TYPE_NOSNIFF', 'True').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = os.getenv('SECURE_BROWSER_XSS_FILTER', 'True').lower() == 'true'
    SECURE_REFERRER_POLICY = os.getenv('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')
    
    # Additional cookie settings
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Strict'
    CSRF_COOKIE_SAMESITE = 'Strict'
else:
    # Development settings - less restrictive
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'authentication': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'surveys': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Channels Configuration - COMMENTED OUT FOR PRODUCTION
# ASGI_APPLICATION = 'weaponpowercloud_backend.asgi.application'

# Redis Channel Layer Configuration - COMMENTED OUT FOR PRODUCTION
# CHANNEL_LAYERS = {
#     'default': {
#         # Temporarily using in-memory backend for compatibility with Redis 3.2
#         'BACKEND': 'channels.layers.InMemoryChannelLayer',
#         # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         # 'CONFIG': {
#         #     "hosts": [(os.getenv('REDIS_HOST', '127.0.0.1'), int(os.getenv('REDIS_PORT', 6379)))],
#         #     "symmetric_encryption_keys": [SECRET_KEY[:32]],  # Use first 32 chars of SECRET_KEY
#         #     "capacity": 1500,  # Maximum number of messages in a channel
#         #     "expiry": 60,  # Message expiry time in seconds
#         # },
#     },
# }

# WebSocket Configuration - COMMENTED OUT FOR PRODUCTION
# WEBSOCKET_URL = os.getenv('WEBSOCKET_URL', 'ws://localhost:8000/ws/')

# Security Configuration
# Brute Force Protection Settings
MAX_LOGIN_ATTEMPTS = int(os.getenv('MAX_LOGIN_ATTEMPTS', '3'))
LOCKOUT_DURATION_MINUTES = int(os.getenv('LOCKOUT_DURATION_MINUTES', '15'))
RATE_LIMIT_DURATION_MINUTES = int(os.getenv('RATE_LIMIT_DURATION_MINUTES', '5'))

# Security Headers
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_BROWSER_XSS_FILTER = True

# Content Security Policy - basic secure configuration
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Allow inline styles for admin
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'", "https:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)  # Equivalent to X-Frame-Options: DENY

# Additional Security Settings for Production
if not DEBUG:
    # Force HTTPS in production
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Enhanced CSP for production
    allowed_hosts = [host.strip() for host in os.getenv('ALLOWED_HOST', 'localhost').split(',')]
    CSP_CONNECT_SRC = ("'self'",) + tuple(f"https://{host}" for host in allowed_hosts)
    
    # Additional production security
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Development settings
    CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'")  # Allow for development
    CSP_CONNECT_SRC = ("'self'", "http://localhost:*", "https://localhost:*")
    CSP_CONNECT_SRC = ("'self'", "https:")

# Input Sanitization Settings
ALLOWED_HTML_TAGS = [
    'p', 'br', 'strong', 'b', 'em', 'i', 'u', 
    'ul', 'ol', 'li', 'blockquote'
]

ALLOWED_HTML_ATTRIBUTES = {
    '*': ['class'],
}

# File Upload Security
MAX_UPLOAD_SIZE = int(os.getenv('MAX_UPLOAD_SIZE', '10485760'))  # 10MB default
ALLOWED_FILE_TYPES = [
    'image/jpeg', 'image/jpg', 'image/png', 'image/gif',
    'application/pdf', 'text/plain', 'text/csv'
]
